// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: data.proto

package tictactoe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicTacToeGameClient is the client API for TicTacToeGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicTacToeGameClient interface {
	GetUpdatedGameDetails(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameDetails, error)
	PutMarker(ctx context.Context, in *PutMarkerRequest, opts ...grpc.CallOption) (*PutMarkerResponse, error)
	GetWinnerDetails(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*WinnerDetails, error)
	StartNewGame(ctx context.Context, in *StartNewGameRequest, opts ...grpc.CallOption) (*StartNewGameResponse, error)
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
}

type ticTacToeGameClient struct {
	cc grpc.ClientConnInterface
}

func NewTicTacToeGameClient(cc grpc.ClientConnInterface) TicTacToeGameClient {
	return &ticTacToeGameClient{cc}
}

func (c *ticTacToeGameClient) GetUpdatedGameDetails(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameDetails, error) {
	out := new(GameDetails)
	err := c.cc.Invoke(ctx, "/tictactoe.TicTacToeGame/GetUpdatedGameDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeGameClient) PutMarker(ctx context.Context, in *PutMarkerRequest, opts ...grpc.CallOption) (*PutMarkerResponse, error) {
	out := new(PutMarkerResponse)
	err := c.cc.Invoke(ctx, "/tictactoe.TicTacToeGame/PutMarker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeGameClient) GetWinnerDetails(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*WinnerDetails, error) {
	out := new(WinnerDetails)
	err := c.cc.Invoke(ctx, "/tictactoe.TicTacToeGame/GetWinnerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeGameClient) StartNewGame(ctx context.Context, in *StartNewGameRequest, opts ...grpc.CallOption) (*StartNewGameResponse, error) {
	out := new(StartNewGameResponse)
	err := c.cc.Invoke(ctx, "/tictactoe.TicTacToeGame/StartNewGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeGameClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, "/tictactoe.TicTacToeGame/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicTacToeGameServer is the server API for TicTacToeGame service.
// All implementations should embed UnimplementedTicTacToeGameServer
// for forward compatibility
type TicTacToeGameServer interface {
	GetUpdatedGameDetails(context.Context, *GameRequest) (*GameDetails, error)
	PutMarker(context.Context, *PutMarkerRequest) (*PutMarkerResponse, error)
	GetWinnerDetails(context.Context, *GameRequest) (*WinnerDetails, error)
	StartNewGame(context.Context, *StartNewGameRequest) (*StartNewGameResponse, error)
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
}

// UnimplementedTicTacToeGameServer should be embedded to have forward compatible implementations.
type UnimplementedTicTacToeGameServer struct {
}

func (UnimplementedTicTacToeGameServer) GetUpdatedGameDetails(context.Context, *GameRequest) (*GameDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdatedGameDetails not implemented")
}
func (UnimplementedTicTacToeGameServer) PutMarker(context.Context, *PutMarkerRequest) (*PutMarkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMarker not implemented")
}
func (UnimplementedTicTacToeGameServer) GetWinnerDetails(context.Context, *GameRequest) (*WinnerDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWinnerDetails not implemented")
}
func (UnimplementedTicTacToeGameServer) StartNewGame(context.Context, *StartNewGameRequest) (*StartNewGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNewGame not implemented")
}
func (UnimplementedTicTacToeGameServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}

// UnsafeTicTacToeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicTacToeGameServer will
// result in compilation errors.
type UnsafeTicTacToeGameServer interface {
	mustEmbedUnimplementedTicTacToeGameServer()
}

func RegisterTicTacToeGameServer(s grpc.ServiceRegistrar, srv TicTacToeGameServer) {
	s.RegisterService(&TicTacToeGame_ServiceDesc, srv)
}

func _TicTacToeGame_GetUpdatedGameDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeGameServer).GetUpdatedGameDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe.TicTacToeGame/GetUpdatedGameDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeGameServer).GetUpdatedGameDetails(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeGame_PutMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMarkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeGameServer).PutMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe.TicTacToeGame/PutMarker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeGameServer).PutMarker(ctx, req.(*PutMarkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeGame_GetWinnerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeGameServer).GetWinnerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe.TicTacToeGame/GetWinnerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeGameServer).GetWinnerDetails(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeGame_StartNewGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNewGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeGameServer).StartNewGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe.TicTacToeGame/StartNewGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeGameServer).StartNewGame(ctx, req.(*StartNewGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeGame_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeGameServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe.TicTacToeGame/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeGameServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicTacToeGame_ServiceDesc is the grpc.ServiceDesc for TicTacToeGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicTacToeGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tictactoe.TicTacToeGame",
	HandlerType: (*TicTacToeGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUpdatedGameDetails",
			Handler:    _TicTacToeGame_GetUpdatedGameDetails_Handler,
		},
		{
			MethodName: "PutMarker",
			Handler:    _TicTacToeGame_PutMarker_Handler,
		},
		{
			MethodName: "GetWinnerDetails",
			Handler:    _TicTacToeGame_GetWinnerDetails_Handler,
		},
		{
			MethodName: "StartNewGame",
			Handler:    _TicTacToeGame_StartNewGame_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _TicTacToeGame_JoinGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}
